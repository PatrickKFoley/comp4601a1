const Crawler = require("crawler");
var XMLHttpRequest = require('xhr2');

let updatedCount = 0;
let numInQueue = 0

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

let globalLinkedBy = {}
let globalPageOb = {}
// function createCrawler(url, root, dbName, lim) {
//     const c = new Crawler({
//         rateLimit: 800,
    
//         // This will be called for each crawled page
//         callback : async function (error, res, done) {
//             if (error) {
//                 console.log(error);
//             } else {
//                 let $ = res.$;
//                 let links = $("a"); // get all links from page
//                 let currentURL = res.request.uri.href;
//                 let title = $("title").text();
//                 let bodyText = $("body").text()

//                 if (dbName == "personal") {
//                     let body = $(".mw-page-container-inner");
//                     let paragraphs = body.find('p');

//                     bodyText = ""
//                     // paragraphs.each((index, element) => {
//                     //     bodyText += $(element).text().replace(/[^'a-zA-Z]/g, ' ');
//                     // })

//                     // let newWords = bodyText.match(/\b\w+\b/g)
//                     // bodyText = newWords.join(' ')
//                 }

//                 let linksArr = [];
//                 for (let i = 0; i < links.length; i++) {
//                     let link = links.eq(i)
//                     let href = $(link).attr('href')
                
//                     if (dbName == "personal") {
//                         if (href == undefined || href.slice(0, 5) != "/wiki" || (href.split(":").length-1) != 0 || (href.split("#").length-1) != 0) {
//                             continue
//                         }
//                     }

//                     let childURL = url + href.slice(1);
//                     if (dbName == "personal" && currentURL == childURL) {
//                         continue
//                     }
    
//                     linksArr.push(childURL);
//                     globalLinkedBy[childURL].push(currentURL)
    
//                     let isInDB = false;
//                     if (numInQueue != lim) {
//                         try {
//                             isInDB = await doesPageExist(childURL, dbName)
//                         } catch (error) {
//                             console.error("Error in doesPageExist:", error)
//                         }
//                     } else {
//                         isInDB = true
//                     }
                    
//                     if (isInDB) {
//                         let updatedPage = {
//                             url: childURL,
//                             linkedBy: currentURL,
//                             dbName: dbName
//                         }
//                         updatePage(updatedPage);
//                         // sleep(1000)
//                     } else {
//                         //console.log("Created new page for link with HREF: ", href)
//                         let page = {
//                             url: childURL,
//                             linksTo: [],
//                             linkedBy: [currentURL],
//                             linkedByCount: 1,
//                             parentURL: currentURL,
//                             body: null,
//                             title: null,
//                             dbName: dbName
//                         }

//                         if (numInQueue < lim) {
//                             addPage(page);
//                             c.queue(childURL);
//                             numInQueue++;
//                             console.log("Num in Queue: " + numInQueue)
//                         }

//                         // if (isInDB != null && isInDB.stop) {}
//                     }
//                 };
//                 // sleep(1000)
//                 // LOGIC TO UPDATE CURRENT PAGE BEING CRAWLED
//                 if (currentURL == root) {
//                     let page = {
//                         url: currentURL,
//                         linksTo: linksArr,
//                         linkedBy: [],
//                         linkedByCount: 0,
//                         parentURL: null,
//                         body: bodyText,
//                         title: title,
//                         dbName: dbName
//                     }
//                     addPage(page)
//                 } else {
//                     updatedCount++;
//                     console.log('Updated Count: ' + updatedCount)
//                     let updatedPage = {
//                         url: currentURL,
//                         linksTo: linksArr,
//                         body: bodyText,
//                         title: title,
//                         dbName: dbName
//                     }
//                     updatePage(updatedPage);
//                 }
//             }
//             done();
//         }
//     });
//     return c
// }

function createCrawler(url, root, dbName, lim) {
    const c = new Crawler({
        rateLimit: 800,
    
        // This will be called for each crawled page
        callback : async function (error, res, done) {
            if (error) {
                console.log(error);
            } else {
                let $ = res.$;
                let links = $("a"); // get all links from page
                let currentURL = res.request.uri.href;
                let title = $("title").text();
                let bodyText = $("body").text()

                if (dbName == "personal") {
                    let body = $(".mw-page-container-inner");
                    let paragraphs = body.find('p');

                    bodyText = ""
                    paragraphs.each((index, element) => {
                        bodyText += $(element).text().replace(/[^'a-zA-Z]/g, ' ');
                    })

                    let newWords = bodyText.match(/\b\w+\b/g)
                    bodyText = newWords.join('\n')
                }

                let linksArr = [];
                for (let i = 0; i < links.length; i++) {
                    // console.log(i)
                    let link = links.eq(i)
                    let href = $(link).attr('href')
                
                    if (dbName == "personal") {
                        if (href == undefined || href.slice(0, 5) != "/wiki" || (href.split(":").length-1) != 0 || (href.split("#").length-1) != 0) {
                            continue
                        }
                    }

                    let childURL = url + href.slice(1);
                    if (dbName == "personal" && currentURL == childURL) {
                        continue
                    }
    
                    linksArr.push(childURL);

                    if (numInQueue < lim) {
                        if (!globalLinkedBy[childURL]) {
                            globalLinkedBy[childURL] = []
                        }
                        globalLinkedBy[childURL].push(currentURL)
                    } else {
                        if (globalLinkedBy[childURL]) {
                            globalLinkedBy[childURL].push(currentURL)
                        }
                    }
                    
                    if (numInQueue < lim && !globalPageOb[childURL]) {
                        c.queue(childURL);
                        numInQueue++;
                        console.log("Num in Queue: " + numInQueue)
                    }
                };

                globalPageOb[currentURL] = {
                    url: currentURL,
                    linksTo: linksArr,
                    linkedBy: [],
                    body: bodyText,
                    title: title,
                    dbName: dbName
                }
            }
            done();
        }
    });
    return c
}

// async function doesPageExist(url, dbName) {
//     return new Promise(function(resolve, reject) {
//         req = new XMLHttpRequest();
//         req.onreadystatechange = function() {
//             if (req.readyState == 4 && req.status == 200) {
//                 try {
//                     const response = JSON.parse(req.responseText)

//                     resolve(response != null ? response : null)
//                 } catch (error) {
//                     reject(error)
//                 }
//             }
//         }
//         req.open("GET", `http://localhost:3000/${dbName}?url=${url}}`, true);
//         req.send()
//     })
// }

// function addPage(page) {
//     req = new XMLHttpRequest();
//     req.onreadystatechange = function() {
//         if (req.readyState == 4 && req.status == 200) {
//             console.log("Page added!")

//         } else if (this.readyState == 4 && this.status == 500) {
//             // console.log("The server broke.");
//         }
//     }

//     req.open("POST", `http://localhost:3000/${page.dbName}`);
//     req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
//     req.send(JSON.stringify(page))
// }

function addPages(pages) {
    req = new XMLHttpRequest();
    req.onreadystatechange = function() {
        if (req.readyState == 4 && req.status == 200) {
            console.log("Page added!")

        } else if (this.readyState == 4 && this.status == 500) {
            // console.log("The server broke.");
        }
    }
    req.open("POST", `http://localhost:3000/${pages[0].dbName}`);
    req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    req.send(JSON.stringify(pages))
}

// function updatePage(page) {
//     req = new XMLHttpRequest();
//     req.onreadystatechange = function() {
//         if (req.readyState == 4 && req.status == 200) {
//             // console.log("Page updated!")

//         } else if (this.readyState == 4 && this.status == 500) {
//             // console.log("The server broke.");
//         }
//     }

//     req.open("PATCH", `http://localhost:3000/${page.dbName}/ID`);
//     req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
//     req.send(JSON.stringify(page))
// }

// Queue the fruit URL, which starts the fruit crawl
// let fruitCrawler = createCrawler('https://people.scs.carleton.ca/~davidmckenney/fruitgraph', 'https://people.scs.carleton.ca/~davidmckenney/fruitgraph/N-0.html', 'fruits', 1000);
// fruitCrawler.queue('https://people.scs.carleton.ca/~davidmckenney/fruitgraph/N-0.html');

//Triggered when the queue becomes empty
// fruitCrawler.on('drain', function() {
//     req = new XMLHttpRequest();
//     req.onreadystatechange = function() {
//         if (req.readyState == 4 && req.status == 200) {
//             console.log("Added pages to index")
//         }


//     }
//     req.open("GET", `http://localhost:3000/done?collection=fruits`, true);
//     req.send()
// });


//Queue the fruit URL, which starts the fruit crawl
let personalCrawler = createCrawler('https://en.wikipedia.org/', 'https://en.wikipedia.org/wiki/Carleton_University', 'personal', 500);
personalCrawler.queue('https://en.wikipedia.org/wiki/Carleton_University');

//Triggered when the queue becomes empty
personalCrawler.on('drain', async function() {
    let count = 0;
    let pagesToUpdate = [];
    console.log(Object.entries(globalPageOb).length)
    for (const [key, value] of Object.entries(globalPageOb)) {
        globalPageOb[key].linkedBy = globalLinkedBy[key]
        pagesToUpdate.push(globalPageOb[key])
        count++;
        // console.log({count})
    }

    if (pagesToUpdate.length > 0) {
        addPages(pagesToUpdate)
    }

    req = new XMLHttpRequest();
    req.onreadystatechange = function() {
        if (req.readyState == 4 && req.status == 200) {
            console.log("Added pages to index")
        }
    }
    req.open("GET", `http://localhost:3000/done?collection=personal`, true);
    req.send()
});

